/**
  *ProteinTrackerLib
  *
  * This file was automatically generated by APIMATIC BETA v2.0 on 02/02/2016
  */

'use strict';
angular.module('ProteinTrackerLib').factory('APIController',function($q,Configuration,HttpClient,APIHelper){
    return{
        /**
         * returns items that have names with prefixed with the query.
         * @param {string} q    Required parameter: TODO: type description here
         * @param {int|null} limit    Optional parameter: TODO: type description here
         * @param {int|null} offset    Optional parameter: TODO: type description here
         *
         * @return {promise<array>}
         */
        getQuerySearch : function(q, limit, offset){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/api/search";
            
            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "q" : q,
                "limit" : limit,
                "offset" : offset
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json"
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
            });
            
            return deffered.promise;
        },
        /**
         * gets information about a particular food item
         * @param {string} externalID    Required parameter: TODO: type description here
         *
         * @return {promise<FoodItemDetail>}
         */
        getItemSearch : function(externalID){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/externalItem";
            
            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "externalID" : externalID
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json"
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
            });
            
            return deffered.promise;
        }
    }
});